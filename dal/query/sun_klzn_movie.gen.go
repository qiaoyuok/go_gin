// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go_gin/dal/model"
)

func newKlznMovie(db *gorm.DB) klznMovie {
	_klznMovie := klznMovie{}

	_klznMovie.klznMovieDo.UseDB(db)
	_klznMovie.klznMovieDo.UseModel(&model.KlznMovie{})

	tableName := _klznMovie.klznMovieDo.TableName()
	_klznMovie.ALL = field.NewAsterisk(tableName)
	_klznMovie.ID = field.NewInt32(tableName, "id")
	_klznMovie.URL = field.NewString(tableName, "url")
	_klznMovie.Title = field.NewString(tableName, "title")
	_klznMovie.Keyword = field.NewString(tableName, "keyword")
	_klznMovie.Description = field.NewString(tableName, "description")
	_klznMovie.Content = field.NewString(tableName, "content")
	_klznMovie.Hot = field.NewInt32(tableName, "hot")
	_klznMovie.Status = field.NewBool(tableName, "status")
	_klznMovie.CreatedAt = field.NewTime(tableName, "created_at")
	_klznMovie.UpdatedAt = field.NewTime(tableName, "updated_at")

	_klznMovie.fillFieldMap()

	return _klznMovie
}

type klznMovie struct {
	klznMovieDo

	ALL   field.Asterisk
	ID    field.Int32  // 自增ID
	URL   field.String // 地址
	Title field.String // 标题
	/*
		关键字

	*/
	Keyword     field.String
	Description field.String // 描述
	Content     field.String // 内容
	Hot         field.Int32  // 热度值
	Status      field.Bool   // 状态；1：正常；2：删除
	CreatedAt   field.Time   // 添加时间
	UpdatedAt   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (k klznMovie) Table(newTableName string) *klznMovie {
	k.klznMovieDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k klznMovie) As(alias string) *klznMovie {
	k.klznMovieDo.DO = *(k.klznMovieDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *klznMovie) updateTableName(table string) *klznMovie {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewInt32(table, "id")
	k.URL = field.NewString(table, "url")
	k.Title = field.NewString(table, "title")
	k.Keyword = field.NewString(table, "keyword")
	k.Description = field.NewString(table, "description")
	k.Content = field.NewString(table, "content")
	k.Hot = field.NewInt32(table, "hot")
	k.Status = field.NewBool(table, "status")
	k.CreatedAt = field.NewTime(table, "created_at")
	k.UpdatedAt = field.NewTime(table, "updated_at")

	k.fillFieldMap()

	return k
}

func (k *klznMovie) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *klznMovie) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 10)
	k.fieldMap["id"] = k.ID
	k.fieldMap["url"] = k.URL
	k.fieldMap["title"] = k.Title
	k.fieldMap["keyword"] = k.Keyword
	k.fieldMap["description"] = k.Description
	k.fieldMap["content"] = k.Content
	k.fieldMap["hot"] = k.Hot
	k.fieldMap["status"] = k.Status
	k.fieldMap["created_at"] = k.CreatedAt
	k.fieldMap["updated_at"] = k.UpdatedAt
}

func (k klznMovie) clone(db *gorm.DB) klznMovie {
	k.klznMovieDo.ReplaceDB(db)
	return k
}

type klznMovieDo struct{ gen.DO }

func (k klznMovieDo) Debug() *klznMovieDo {
	return k.withDO(k.DO.Debug())
}

func (k klznMovieDo) WithContext(ctx context.Context) *klznMovieDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k klznMovieDo) ReadDB() *klznMovieDo {
	return k.Clauses(dbresolver.Read)
}

func (k klznMovieDo) WriteDB() *klznMovieDo {
	return k.Clauses(dbresolver.Write)
}

func (k klznMovieDo) Clauses(conds ...clause.Expression) *klznMovieDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k klznMovieDo) Returning(value interface{}, columns ...string) *klznMovieDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k klznMovieDo) Not(conds ...gen.Condition) *klznMovieDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k klznMovieDo) Or(conds ...gen.Condition) *klznMovieDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k klznMovieDo) Select(conds ...field.Expr) *klznMovieDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k klznMovieDo) Where(conds ...gen.Condition) *klznMovieDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k klznMovieDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *klznMovieDo {
	return k.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (k klznMovieDo) Order(conds ...field.Expr) *klznMovieDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k klznMovieDo) Distinct(cols ...field.Expr) *klznMovieDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k klznMovieDo) Omit(cols ...field.Expr) *klznMovieDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k klznMovieDo) Join(table schema.Tabler, on ...field.Expr) *klznMovieDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k klznMovieDo) LeftJoin(table schema.Tabler, on ...field.Expr) *klznMovieDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k klznMovieDo) RightJoin(table schema.Tabler, on ...field.Expr) *klznMovieDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k klznMovieDo) Group(cols ...field.Expr) *klznMovieDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k klznMovieDo) Having(conds ...gen.Condition) *klznMovieDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k klznMovieDo) Limit(limit int) *klznMovieDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k klznMovieDo) Offset(offset int) *klznMovieDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k klznMovieDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *klznMovieDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k klznMovieDo) Unscoped() *klznMovieDo {
	return k.withDO(k.DO.Unscoped())
}

func (k klznMovieDo) Create(values ...*model.KlznMovie) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k klznMovieDo) CreateInBatches(values []*model.KlznMovie, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k klznMovieDo) Save(values ...*model.KlznMovie) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k klznMovieDo) First() (*model.KlznMovie, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KlznMovie), nil
	}
}

func (k klznMovieDo) Take() (*model.KlznMovie, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KlznMovie), nil
	}
}

func (k klznMovieDo) Last() (*model.KlznMovie, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KlznMovie), nil
	}
}

func (k klznMovieDo) Find() ([]*model.KlznMovie, error) {
	result, err := k.DO.Find()
	return result.([]*model.KlznMovie), err
}

func (k klznMovieDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KlznMovie, err error) {
	buf := make([]*model.KlznMovie, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k klznMovieDo) FindInBatches(result *[]*model.KlznMovie, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k klznMovieDo) Attrs(attrs ...field.AssignExpr) *klznMovieDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k klznMovieDo) Assign(attrs ...field.AssignExpr) *klznMovieDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k klznMovieDo) Joins(fields ...field.RelationField) *klznMovieDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k klznMovieDo) Preload(fields ...field.RelationField) *klznMovieDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k klznMovieDo) FirstOrInit() (*model.KlznMovie, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KlznMovie), nil
	}
}

func (k klznMovieDo) FirstOrCreate() (*model.KlznMovie, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KlznMovie), nil
	}
}

func (k klznMovieDo) FindByPage(offset int, limit int) (result []*model.KlznMovie, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k klznMovieDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k klznMovieDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k klznMovieDo) Delete(models ...*model.KlznMovie) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *klznMovieDo) withDO(do gen.Dao) *klznMovieDo {
	k.DO = *do.(*gen.DO)
	return k
}
