// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go_gin/dal/model"
)

func newKlznSite(db *gorm.DB) klznSite {
	_klznSite := klznSite{}

	_klznSite.klznSiteDo.UseDB(db)
	_klznSite.klznSiteDo.UseModel(&model.KlznSite{})

	tableName := _klznSite.klznSiteDo.TableName()
	_klznSite.ALL = field.NewAsterisk(tableName)
	_klznSite.ID = field.NewInt32(tableName, "id")
	_klznSite.TargetURL = field.NewString(tableName, "target_url")
	_klznSite.URL = field.NewString(tableName, "url")
	_klznSite.Logo = field.NewString(tableName, "logo")
	_klznSite.Icon = field.NewString(tableName, "icon")
	_klznSite.TopURL = field.NewString(tableName, "top_url")
	_klznSite.Name = field.NewString(tableName, "name")
	_klznSite.Title = field.NewString(tableName, "title")
	_klznSite.Keywords = field.NewString(tableName, "keywords")
	_klznSite.Description = field.NewString(tableName, "description")
	_klznSite.Kw = field.NewString(tableName, "kw")
	_klznSite.Tag = field.NewString(tableName, "tag")
	_klznSite.Content = field.NewString(tableName, "content")
	_klznSite.Status = field.NewInt32(tableName, "status")
	_klznSite.CreatedAt = field.NewTime(tableName, "created_at")
	_klznSite.UpdatedAt = field.NewTime(tableName, "updated_at")
	_klznSite.Sort = field.NewInt32(tableName, "sort")
	_klznSite.IsRecommend = field.NewInt32(tableName, "is_recommend")

	_klznSite.fillFieldMap()

	return _klznSite
}

type klznSite struct {
	klznSiteDo

	ALL         field.Asterisk
	ID          field.Int32
	TargetURL   field.String // 捕获到的目标URL
	URL         field.String // 网站URL
	Logo        field.String // 网站Logo
	Icon        field.String // 网站图标
	TopURL      field.String // 网站顶级域名
	Name        field.String // 网站名称
	Title       field.String // 网站标题
	Keywords    field.String // 网站关键字
	Description field.String // 网站描述
	Kw          field.String // 当前搜索关键字
	Tag         field.String // 标签
	Content     field.String // 内容丰富描述
	Status      field.Int32  // 状态；1：正常；2：删除
	CreatedAt   field.Time   // 添加时间
	UpdatedAt   field.Time   // 更新时间
	Sort        field.Int32  // 排序；正序
	IsRecommend field.Int32  // 是否推荐；1：是；2：否

	fieldMap map[string]field.Expr
}

func (k klznSite) Table(newTableName string) *klznSite {
	k.klznSiteDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k klznSite) As(alias string) *klznSite {
	k.klznSiteDo.DO = *(k.klznSiteDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *klznSite) updateTableName(table string) *klznSite {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewInt32(table, "id")
	k.TargetURL = field.NewString(table, "target_url")
	k.URL = field.NewString(table, "url")
	k.Logo = field.NewString(table, "logo")
	k.Icon = field.NewString(table, "icon")
	k.TopURL = field.NewString(table, "top_url")
	k.Name = field.NewString(table, "name")
	k.Title = field.NewString(table, "title")
	k.Keywords = field.NewString(table, "keywords")
	k.Description = field.NewString(table, "description")
	k.Kw = field.NewString(table, "kw")
	k.Tag = field.NewString(table, "tag")
	k.Content = field.NewString(table, "content")
	k.Status = field.NewInt32(table, "status")
	k.CreatedAt = field.NewTime(table, "created_at")
	k.UpdatedAt = field.NewTime(table, "updated_at")
	k.Sort = field.NewInt32(table, "sort")
	k.IsRecommend = field.NewInt32(table, "is_recommend")

	k.fillFieldMap()

	return k
}

func (k *klznSite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *klznSite) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 18)
	k.fieldMap["id"] = k.ID
	k.fieldMap["target_url"] = k.TargetURL
	k.fieldMap["url"] = k.URL
	k.fieldMap["logo"] = k.Logo
	k.fieldMap["icon"] = k.Icon
	k.fieldMap["top_url"] = k.TopURL
	k.fieldMap["name"] = k.Name
	k.fieldMap["title"] = k.Title
	k.fieldMap["keywords"] = k.Keywords
	k.fieldMap["description"] = k.Description
	k.fieldMap["kw"] = k.Kw
	k.fieldMap["tag"] = k.Tag
	k.fieldMap["content"] = k.Content
	k.fieldMap["status"] = k.Status
	k.fieldMap["created_at"] = k.CreatedAt
	k.fieldMap["updated_at"] = k.UpdatedAt
	k.fieldMap["sort"] = k.Sort
	k.fieldMap["is_recommend"] = k.IsRecommend
}

func (k klznSite) clone(db *gorm.DB) klznSite {
	k.klznSiteDo.ReplaceDB(db)
	return k
}

type klznSiteDo struct{ gen.DO }

func (k klznSiteDo) Debug() *klznSiteDo {
	return k.withDO(k.DO.Debug())
}

func (k klznSiteDo) WithContext(ctx context.Context) *klznSiteDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k klznSiteDo) ReadDB() *klznSiteDo {
	return k.Clauses(dbresolver.Read)
}

func (k klznSiteDo) WriteDB() *klznSiteDo {
	return k.Clauses(dbresolver.Write)
}

func (k klznSiteDo) Clauses(conds ...clause.Expression) *klznSiteDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k klznSiteDo) Returning(value interface{}, columns ...string) *klznSiteDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k klznSiteDo) Not(conds ...gen.Condition) *klznSiteDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k klznSiteDo) Or(conds ...gen.Condition) *klznSiteDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k klznSiteDo) Select(conds ...field.Expr) *klznSiteDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k klznSiteDo) Where(conds ...gen.Condition) *klznSiteDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k klznSiteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *klznSiteDo {
	return k.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (k klznSiteDo) Order(conds ...field.Expr) *klznSiteDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k klznSiteDo) Distinct(cols ...field.Expr) *klznSiteDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k klznSiteDo) Omit(cols ...field.Expr) *klznSiteDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k klznSiteDo) Join(table schema.Tabler, on ...field.Expr) *klznSiteDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k klznSiteDo) LeftJoin(table schema.Tabler, on ...field.Expr) *klznSiteDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k klznSiteDo) RightJoin(table schema.Tabler, on ...field.Expr) *klznSiteDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k klznSiteDo) Group(cols ...field.Expr) *klznSiteDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k klznSiteDo) Having(conds ...gen.Condition) *klznSiteDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k klznSiteDo) Limit(limit int) *klznSiteDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k klznSiteDo) Offset(offset int) *klznSiteDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k klznSiteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *klznSiteDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k klznSiteDo) Unscoped() *klznSiteDo {
	return k.withDO(k.DO.Unscoped())
}

func (k klznSiteDo) Create(values ...*model.KlznSite) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k klznSiteDo) CreateInBatches(values []*model.KlznSite, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k klznSiteDo) Save(values ...*model.KlznSite) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k klznSiteDo) First() (*model.KlznSite, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KlznSite), nil
	}
}

func (k klznSiteDo) Take() (*model.KlznSite, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KlznSite), nil
	}
}

func (k klznSiteDo) Last() (*model.KlznSite, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KlznSite), nil
	}
}

func (k klznSiteDo) Find() ([]*model.KlznSite, error) {
	result, err := k.DO.Find()
	return result.([]*model.KlznSite), err
}

func (k klznSiteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KlznSite, err error) {
	buf := make([]*model.KlznSite, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k klznSiteDo) FindInBatches(result *[]*model.KlznSite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k klznSiteDo) Attrs(attrs ...field.AssignExpr) *klznSiteDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k klznSiteDo) Assign(attrs ...field.AssignExpr) *klznSiteDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k klznSiteDo) Joins(fields ...field.RelationField) *klznSiteDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k klznSiteDo) Preload(fields ...field.RelationField) *klznSiteDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k klznSiteDo) FirstOrInit() (*model.KlznSite, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KlznSite), nil
	}
}

func (k klznSiteDo) FirstOrCreate() (*model.KlznSite, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KlznSite), nil
	}
}

func (k klznSiteDo) FindByPage(offset int, limit int) (result []*model.KlznSite, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k klznSiteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k klznSiteDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k klznSiteDo) Delete(models ...*model.KlznSite) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *klznSiteDo) withDO(do gen.Dao) *klznSiteDo {
	k.DO = *do.(*gen.DO)
	return k
}
